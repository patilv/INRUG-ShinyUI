{
    "contents" : "---\ntitle       : Shiny for Interactive Application Development using R\nsubtitle    : \nauthor      : Vivek Patil\njob         : Associate Professor of Marketing, Gonzaga University\nframework   : io2012        # {io2012, html5slides, shower, dzslides, ...}\nhighlighter : highlight.js  # {highlight.js, prettify, highlight}\nhitheme     : tomorrow      # \nwidgets     : [mathjax]            # {mathjax, quiz, bootstrap}\nmode        : selfcontained # {standalone, draft}\n---\n\n## What is shiny\n\n* Package from RStudio ([http://shiny.rstudio.com/](http://shiny.rstudio.com/))\n* Interactive analysis of data\n* Stand-alone applications and dashboards\n\n```{r eval=FALSE}\nif (!require(\"devtools\"))\n  install.packages(\"devtools\")\ndevtools::install_github(\"rstudio/shiny\")\n```\n\n---\n## Components of an application\n\nTwo files\n\n1. User-Interface file (ui.R) - inputs and display of output in a customizable layout\n2. Server (server.R) - the work-horse that takes inputs, processes it, and creates outputs to display in ui\n\n---\n## Developing a sample application using iris\n\nSepal length and width and Petal length and width of 50 flowers from each of 3 species of iris - setosa, versicolor, and virginica\n\n1. View data (or a sample of it)\n2. Summarize data \n3. 2 graphs of data - a scatter plot and a box plot\n\n---\n## View Data\n\n```{r}\nhead(iris,5)\n# tail(iris,n) \n# iris\n```\n\n---\n## Summarize Data\n\n```{r}\nsummary(iris)\n```\n\n---\n## Plot 1 - Scatter plot\n\n```{r}\nlibrary(ggplot2)\nggplot(iris,aes(x=Sepal.Length,y=Sepal.Width,color=Species))+geom_point()\n````\n\n---\n## Plot 2 - Box plot\n\n```{r}\nggplot(iris,aes(x=Species,y=Sepal.Length))+geom_boxplot()\n```\n\n---\n## Recap\n\n1. View data (or a sample of it) (using `head`, `tail`, or just the entire data)\n2. Summarize data (using `summary`)\n3. 2 graphs of data - a scatter plot (x= Sepal.Length, y= Sepal.Width) and a box plot (how distribution of Sepal.Length varied across the three Species)\n\n---\n## Imagine the difficulty below\n\n1. What if one wanted the ability to specify any variable for x and y axes for the scatter plot?\n2. What if one wanted to alter the variable whose distribution you wanted to plot across the three species in your box plot?\n3. What if one wanted to select a specific subset of the data (any range of any of the 4 numeric variables) and wanted to see how the data, summary, and the two plots changed?\n\n---\n## Let's work on the user interface\n\nOff-the-shelf widgets for inputs: [http://shiny.rstudio.com/gallery/widget-gallery.html](http://shiny.rstudio.com/gallery/widget-gallery.html)\n\n<iframe src=\"http://shiny.rstudio.com/gallery/widget-gallery.html\"></iframe>\n\n---\n## Our Widgets\n\n* One \"Select box\" each for the x-variable and y-variable (for scatter plot), and one \"Select box\" for the dvariable (for distribution to study in box plot) - The options for each of the 4 select boxes will be the same, the four numeric variables\n* One \"Slider range\" for each of the four numeric variables - the minimum and maximum for each \"Slider range\" should be the minimum and maximum of the variable they are representing. Default state of each: The entire range (complete dataset)\n\n---\n## Input widgets for user interface\n\n```{r eval=FALSE}\n# The 5th variable in the iris dataset is not numeric - Species - Not a choice option \nselectInput(\"xvar\", \"x-variable:\", choices=names(iris[,-5]))\nselectInput(\"yvar\", \"y-variable:\", choices=names(iris[,-5]),selected = names(iris[2]))\nselectInput(\"dvar\", \"Distribution of which variable for box plot?\", choices=names(iris[,-5]), selected = names(iris[3]))\n\nsliderInput(\"Sepal.Length\", label = \"Sepal.Length\", min = min(iris$Sepal.Length), max = max(iris$Sepal.Length), \n            value=c(min(iris$Sepal.Length),max(iris$Sepal.Length)))\n         \n# similar code for Sepal.Width, Petal.Length, and Petal.Width will give the remaining 3 inputs for subsetting data \n```\n\n---\n## Output spots in ui.r\n\nSource: [http://shiny.rstudio.com/tutorial/lesson4/](http://shiny.rstudio.com/tutorial/lesson4/)\n\n| Output function | Output|\n|------------- |-------------|\n| htmlOutput      | raw HTML |\n| imageOutput      | image      |\n| plotOutput | plot      |\n| tableOutput      | table |\n| textOutput      | text      |\n| uiOutput | raw HTML      |\n\n\n---\n## Output Spots and their unique names in ui.R\n\n`dataTableOutput(outputId=\"subsetdata\")`\n\nTo present an interactive table of the entire data using the jQuery library `DataTables` \n\n`verbatimTextOutput(\"summary\")`\n\nFor a verbatim textOutput of the `summary` function\n\n`plotOutput(\"scatterplot\")`\n\n`plotOutput(\"boxplot\")`\n\nFor each of the two plots - the scatter plot and the box plot\n\n---\n## Putting the ui.r together with some formatting\n\n<iframe http://shiny.rstudio.com/articles/layout-guide.html></iframe>\n\n\n---\n## The interface: ui code: <a href ...>\n\n<iframe https://patilv.shinyapps.io/INRUG-ShinyUI/> \n\n---\n## server.r\n\n* Take inputs from sliders and subset the data\n  * Display resulting subset using datatable (name: \"subsetdata\" in ui.r)\n* Compute summary of subsetted data and ship it off to \"summary\" in ui.r\n* Take inputs for x and y variable \n  * Create scatter plot using the `ggplot2` package and ship this off to \"scatterplot\" in ui.r\n* Take input for dvar (for distribution variable) and create box plot\n  * Create box plot using `ggplot2` and ship this last piece off to \"boxplot\" in ui.r\n  \n**Don't forget, the input variable names in the server should be the same ones the ui.r is sending to it.**\n\n---\n## Subsetting data\n\n* Creating `dataset` that is reactive to the inputs from the 4 sliders \n* Each of those sliders returns two values, the lower and upper bounds of the range\n\n```{r eval=FALSE}\ndataset=reactive(iris[(iris$Sepal.Length>=input$Sepal.Length[1] & iris$Sepal.Length<=input$Sepal.Length[2]&\n                            iris$Sepal.Width>=input$Sepal.Width[1] & iris$Sepal.Width<=input$Sepal.Width[2]&\n                               iris$Petal.Length>=input$Petal.Length[1] & iris$Petal.Length<=input$Petal.Length[2]&\n                                  iris$Petal.Width>=input$Petal.Width[1] & iris$Petal.Width<=input$Petal.Width[2]),])\n```\n\nMore information on Reactivity can be found here: [http://shiny.rstudio.com/articles/reactivity-overview.html](http://shiny.rstudio.com/articles/reactivity-overview.html)\n\n\n---\n## Rendering the outputs\n\nSource: [http://shiny.rstudio.com/tutorial/lesson4/](http://shiny.rstudio.com/tutorial/lesson4/)\n\n  | Render function        | creates|\n| ------------- |:-------------:|\n| renderImage      | images (saved as a link to a source file) |\n| renderPlot        | plots   |\n| renderPrint      | any printed output      |\n| renderTable | data frame, matrix, other table like structures      |\n| renderText      | character strings |\n| renderUI      | a Shiny tag object or HTML      |\n\n\n---\n## Creating the outputs\n\n```{r eval=FALSE}\noutput$subsetdata <- renderDataTable(dataset(),options=list(pageLength=10)) # for Data table\n  \noutput$summary <- renderPrint(summary(dataset()))\n  \noutput$scatterplot=renderPlot(ggplot(dataset(),aes_string(x=input$xvar, y=input$yvar,color=\"Species\"))+ geom_point()+ggtitle(\"Scatter Plot\"))\n  \noutput$boxplot=renderPlot(ggplot(dataset(),aes_string(x=\"Species\",y=input$dvar))+ geom_boxplot()+ ggtitle(\"Box Plot\"))\n```\n\n* Note how the reactive dataset is referred to as `dataset()`\n* Since the inputs from \"Select box\" show up as strings, we use `aes_string` instead of `aes` in our ggplot creations\n\n---\n## Putting it all together with some instructions and messages\n\n<iframe src=https://patilv.shinyapps.io/INRUG-ShinyFinal/>\n\nCode for final app: \n\n---\n## Deploying/Sharing an Application\n\na href: http://shiny.rstudio.com/tutorial/lesson7/\n\nif {R and shiny available on computer} \n{\n\n* Two R files\n* runURL (from any web link to a zip file comprising the two R files)\n* runGist (Try: `runGist(\"460f7ee20def9a506714\")`)\n* runGitHub (Try: `runGitHub(\"INRUG-ShinyFinal\",\"patilv\")`)\n\n}\n\nelse\n\n{\n\n* [http://www.shinyapps.io/](http://www.shinyapps.io/)    \n[https://patilv.shinyapps.io/INRUG-ShinyFinal/](https://patilv.shinyapps.io/INRUG-ShinyFinal/)\n\n* Shiny Server - Open Source or Professional [http://www.rstudio.com/products/shiny/shiny-server/](http://www.rstudio.com/products/shiny/shiny-server/)  \n\n}\n\n---\n## Resources\n\n* [http://shiny.rstudio.com/](http://shiny.rstudio.com/)\n* Sample apps I have worked on: [http://patilv.com/tags/#Shiny](http://patilv.com/tags/#Shiny)\n* A good collection of other shiny apps, many with the code: [http://www.showmeshiny.com/](http://www.showmeshiny.com/)\n* Search on R-Bloggers: [http://www.r-bloggers.com/?s=shiny](http://www.r-bloggers.com/?s=shiny) \n\nDon't Worry, Be Shiny...sorry, Happy!\n",
    "created" : 1422420391091.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3791586238",
    "id" : "8BFA0A47",
    "lastKnownWriteTime" : 1422422179,
    "path" : "C:/Users/patil.GONZAGA/Dropbox/Reverything/INRUG-Shiny/index.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}